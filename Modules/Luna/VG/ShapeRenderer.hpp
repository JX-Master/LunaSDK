/*!
* This file is a portion of Luna SDK.
* For conditions of distribution and use, see the disclaimer
* and license in LICENSE.txt
* 
* @file ShapeRenderer.hpp
* @author JXMaster
* @date 2023/9/27
*/
#pragma once
#include "ShapeDrawList.hpp"
#include <Luna/RHI/CommandBuffer.hpp>
#include <Luna/Runtime/Math/Matrix.hpp>

namespace Luna
{
    namespace VG
    {
        //! @addtogroup VG
        //! @{
        
        //! @interface
        //! Represents one renderer that processes draw calls generated by @ref IShapeDrawList.
        struct IShapeRenderer : virtual Interface
        {
            luiid("{C0FBD0AE-B7F6-4A82-A59B-B1115ACCBD94}");

            //! Sets the target render texture for the following draw calls.
            //! @param[in] render_target The texture to set.
            virtual RV set_render_target(RHI::ITexture* render_target) = 0;

            //! Draws shapes to the bound texture.
            //! @param[in] cmdbuf The command buffer used to record shape draw calls.
            //! @param[in] vertex_buffer The vertex buffer fetched from @ref IShapeDrawList::get_vertex_buffer.
            //! @param[in] index_buffer The index buffer fetched from @ref IShapeDrawList::get_index_buffer.
            //! @param[in] draw_calls The shape draw calls fetched from @ref IShapeDrawList::get_draw_calls.
            //! @param[in] transform_matrix The projection transfrom matrix applied to vertices. If this is `nullptr`, the 
            //! default transfrom matrix will be used, which is @ref Float4x4::identity.
            virtual RV render(
                RHI::ICommandBuffer* cmdbuf,
                RHI::IBuffer* vertex_buffer,
                RHI::IBuffer* index_buffer,
                Span<const ShapeDrawCall> draw_calls,
                Float4x4U* transform_matrix = nullptr
            ) = 0;
        };

        //! Creates a new shape renderer that draws filled shape contours.
        //! @param[in] render_target The texture used as the render target of the renderer.
        //! @return Returns the created shape renderer.
        LUNA_VG_API R<Ref<IShapeRenderer>> new_fill_shape_renderer(RHI::ITexture* render_target);

        //! @}
    }
}